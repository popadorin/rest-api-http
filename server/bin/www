#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('restp-api-http:server');
const http = require('http');
const mongoose = require('mongoose');
const config = require('../config/config');

const os = require('os');
const hostname = os.hostname();
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */let server = http.createServer(app);

const uri = 'mongodb://' + config.database.host + ':' + config.database.port + '/' + config.database.database;
// Use bluebird
mongoose.Promise = global.Promise;
let options = {
	promiseLibrary: require('bluebird'),
	useMongoClient: true
};

mongoose.connect(uri, options);
mongoose.connection.on('error', console.error.bind(console, 'connection error:'));
mongoose.connection.on('open', function () {


	/**
	 * Listen on provided port, on all network interfaces.
	 */

	server.listen(port);
	server.on('error', onError);
	server.on('listening', onListening);
	console.log(`Server is listening on host: ${hostname} and port: ${server.address().port}`);
	console.log('Date: ' + new Date());
	console.log(`Environment: ${app.get('env') }`);

});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	let port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	let bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	let addr = server.address();
	let bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
